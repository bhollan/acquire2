// @generated by protobuf-ts 2.2.1
// @generated from protobuf file "pb.proto" (syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PB
 */
export interface PB {
}
/**
 * @generated from protobuf message PB.Game
 */
export interface PB_Game {
    /**
     * @generated from protobuf field: int32 game_id = 1;
     */
    gameId: number;
    /**
     * @generated from protobuf field: int32 game_display_number = 2;
     */
    gameDisplayNumber: number;
    /**
     * @generated from protobuf field: PB.GameStatus game_status = 3;
     */
    gameStatus: PB_GameStatus;
    /**
     * @generated from protobuf field: PB.GameMode game_mode = 4;
     */
    gameMode: PB_GameMode;
    /**
     * @generated from protobuf field: PB.PlayerArrangementMode player_arrangement_mode = 5;
     */
    playerArrangementMode: PB_PlayerArrangementMode;
    /**
     * @generated from protobuf field: repeated PB.Game.Position positions = 6;
     */
    positions: PB_Game_Position[];
    /**
     * @generated from protobuf field: repeated int32 game_board = 7;
     */
    gameBoard: number[];
}
/**
 * @generated from protobuf message PB.Game.Position
 */
export interface PB_Game_Position {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: bool is_host = 2;
     */
    isHost: boolean;
    /**
     * @generated from protobuf field: bool approves_of_game_setup = 3;
     */
    approvesOfGameSetup: boolean;
}
/**
 * @generated from protobuf message PB.GameState
 */
export interface PB_GameState {
    /**
     * @generated from protobuf field: PB.GameAction game_action = 1;
     */
    gameAction?: PB_GameAction;
    /**
     * @generated from protobuf field: int64 timestamp = 2 [jstype = JS_NUMBER];
     */
    timestamp: number;
    /**
     * @generated from protobuf field: repeated PB.GameState.RevealedTileRackTile revealed_tile_rack_tiles = 3;
     */
    revealedTileRackTiles: PB_GameState_RevealedTileRackTile[];
    /**
     * @generated from protobuf field: repeated int32 revealed_tile_bag_tiles = 4;
     */
    revealedTileBagTiles: number[];
    /**
     * @generated from protobuf field: int32 player_id_with_playable_tile_plus_one = 5;
     */
    playerIdWithPlayableTilePlusOne: number; // 1 more than actual player_id
}
/**
 * @generated from protobuf message PB.GameState.RevealedTileRackTile
 */
export interface PB_GameState_RevealedTileRackTile {
    /**
     * @generated from protobuf field: int32 tile = 1;
     */
    tile: number;
    /**
     * @generated from protobuf field: int32 player_id_belongs_to = 2;
     */
    playerIdBelongsTo: number;
}
/**
 * @generated from protobuf message PB.GameSetupAction
 */
export interface PB_GameSetupAction {
    /**
     * @generated from protobuf field: PB.GameSetupAction.JoinGame join_game = 1;
     */
    joinGame?: PB_GameSetupAction_JoinGame;
    /**
     * @generated from protobuf field: PB.GameSetupAction.UnjoinGame unjoin_game = 2;
     */
    unjoinGame?: PB_GameSetupAction_UnjoinGame;
    /**
     * @generated from protobuf field: PB.GameSetupAction.ApproveOfGameSetup approve_of_game_setup = 3;
     */
    approveOfGameSetup?: PB_GameSetupAction_ApproveOfGameSetup;
    /**
     * @generated from protobuf field: PB.GameSetupAction.ChangeGameMode change_game_mode = 4;
     */
    changeGameMode?: PB_GameSetupAction_ChangeGameMode;
    /**
     * @generated from protobuf field: PB.GameSetupAction.ChangePlayerArrangementMode change_player_arrangement_mode = 5;
     */
    changePlayerArrangementMode?: PB_GameSetupAction_ChangePlayerArrangementMode;
    /**
     * @generated from protobuf field: PB.GameSetupAction.SwapPositions swap_positions = 6;
     */
    swapPositions?: PB_GameSetupAction_SwapPositions;
    /**
     * @generated from protobuf field: PB.GameSetupAction.KickUser kick_user = 7;
     */
    kickUser?: PB_GameSetupAction_KickUser;
}
/**
 * @generated from protobuf message PB.GameSetupAction.JoinGame
 */
export interface PB_GameSetupAction_JoinGame {
}
/**
 * @generated from protobuf message PB.GameSetupAction.UnjoinGame
 */
export interface PB_GameSetupAction_UnjoinGame {
}
/**
 * @generated from protobuf message PB.GameSetupAction.ApproveOfGameSetup
 */
export interface PB_GameSetupAction_ApproveOfGameSetup {
}
/**
 * @generated from protobuf message PB.GameSetupAction.ChangeGameMode
 */
export interface PB_GameSetupAction_ChangeGameMode {
    /**
     * @generated from protobuf field: PB.GameMode game_mode = 1;
     */
    gameMode: PB_GameMode;
}
/**
 * @generated from protobuf message PB.GameSetupAction.ChangePlayerArrangementMode
 */
export interface PB_GameSetupAction_ChangePlayerArrangementMode {
    /**
     * @generated from protobuf field: PB.PlayerArrangementMode player_arrangement_mode = 1;
     */
    playerArrangementMode: PB_PlayerArrangementMode;
}
/**
 * @generated from protobuf message PB.GameSetupAction.SwapPositions
 */
export interface PB_GameSetupAction_SwapPositions {
    /**
     * @generated from protobuf field: int32 position1 = 1;
     */
    position1: number;
    /**
     * @generated from protobuf field: int32 position2 = 2;
     */
    position2: number;
}
/**
 * @generated from protobuf message PB.GameSetupAction.KickUser
 */
export interface PB_GameSetupAction_KickUser {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
}
/**
 * @generated from protobuf message PB.GameSetupChange
 */
export interface PB_GameSetupChange {
    /**
     * @generated from protobuf field: PB.GameSetupChange.UserAdded user_added = 1;
     */
    userAdded?: PB_GameSetupChange_UserAdded;
    /**
     * @generated from protobuf field: PB.GameSetupChange.UserRemoved user_removed = 2;
     */
    userRemoved?: PB_GameSetupChange_UserRemoved;
    /**
     * @generated from protobuf field: PB.GameSetupChange.UserApprovedOfGameSetup user_approved_of_game_setup = 3;
     */
    userApprovedOfGameSetup?: PB_GameSetupChange_UserApprovedOfGameSetup;
    /**
     * @generated from protobuf field: PB.GameSetupChange.GameModeChanged game_mode_changed = 4;
     */
    gameModeChanged?: PB_GameSetupChange_GameModeChanged;
    /**
     * @generated from protobuf field: PB.GameSetupChange.PlayerArrangementModeChanged player_arrangement_mode_changed = 5;
     */
    playerArrangementModeChanged?: PB_GameSetupChange_PlayerArrangementModeChanged;
    /**
     * @generated from protobuf field: PB.GameSetupChange.PositionsSwapped positions_swapped = 6;
     */
    positionsSwapped?: PB_GameSetupChange_PositionsSwapped;
    /**
     * @generated from protobuf field: PB.GameSetupChange.UserKicked user_kicked = 7;
     */
    userKicked?: PB_GameSetupChange_UserKicked;
}
/**
 * @generated from protobuf message PB.GameSetupChange.UserAdded
 */
export interface PB_GameSetupChange_UserAdded {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
}
/**
 * @generated from protobuf message PB.GameSetupChange.UserRemoved
 */
export interface PB_GameSetupChange_UserRemoved {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
}
/**
 * @generated from protobuf message PB.GameSetupChange.UserApprovedOfGameSetup
 */
export interface PB_GameSetupChange_UserApprovedOfGameSetup {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
}
/**
 * @generated from protobuf message PB.GameSetupChange.GameModeChanged
 */
export interface PB_GameSetupChange_GameModeChanged {
    /**
     * @generated from protobuf field: PB.GameMode game_mode = 1;
     */
    gameMode: PB_GameMode;
}
/**
 * @generated from protobuf message PB.GameSetupChange.PlayerArrangementModeChanged
 */
export interface PB_GameSetupChange_PlayerArrangementModeChanged {
    /**
     * @generated from protobuf field: PB.PlayerArrangementMode player_arrangement_mode = 1;
     */
    playerArrangementMode: PB_PlayerArrangementMode;
}
/**
 * @generated from protobuf message PB.GameSetupChange.PositionsSwapped
 */
export interface PB_GameSetupChange_PositionsSwapped {
    /**
     * @generated from protobuf field: int32 position1 = 1;
     */
    position1: number;
    /**
     * @generated from protobuf field: int32 position2 = 2;
     */
    position2: number;
}
/**
 * @generated from protobuf message PB.GameSetupChange.UserKicked
 */
export interface PB_GameSetupChange_UserKicked {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
}
/**
 * @generated from protobuf message PB.GameAction
 */
export interface PB_GameAction {
    /**
     * @generated from protobuf field: PB.GameAction.StartGame start_game = 1;
     */
    startGame?: PB_GameAction_StartGame;
    /**
     * @generated from protobuf field: PB.GameAction.PlayTile play_tile = 2;
     */
    playTile?: PB_GameAction_PlayTile;
    /**
     * @generated from protobuf field: PB.GameAction.SelectNewChain select_new_chain = 3;
     */
    selectNewChain?: PB_GameAction_SelectNewChain;
    /**
     * @generated from protobuf field: PB.GameAction.SelectMergerSurvivor select_merger_survivor = 4;
     */
    selectMergerSurvivor?: PB_GameAction_SelectMergerSurvivor;
    /**
     * @generated from protobuf field: PB.GameAction.SelectChainToDisposeOfNext select_chain_to_dispose_of_next = 5;
     */
    selectChainToDisposeOfNext?: PB_GameAction_SelectChainToDisposeOfNext;
    /**
     * @generated from protobuf field: PB.GameAction.DisposeOfShares dispose_of_shares = 6;
     */
    disposeOfShares?: PB_GameAction_DisposeOfShares;
    /**
     * @generated from protobuf field: PB.GameAction.PurchaseShares purchase_shares = 7;
     */
    purchaseShares?: PB_GameAction_PurchaseShares;
    /**
     * @generated from protobuf field: PB.GameAction.GameOver game_over = 8;
     */
    gameOver?: PB_GameAction_GameOver;
}
/**
 * @generated from protobuf message PB.GameAction.StartGame
 */
export interface PB_GameAction_StartGame {
}
/**
 * @generated from protobuf message PB.GameAction.PlayTile
 */
export interface PB_GameAction_PlayTile {
    /**
     * @generated from protobuf field: int32 tile = 1;
     */
    tile: number;
}
/**
 * @generated from protobuf message PB.GameAction.SelectNewChain
 */
export interface PB_GameAction_SelectNewChain {
    /**
     * @generated from protobuf field: PB.GameBoardType chain = 1;
     */
    chain: PB_GameBoardType;
}
/**
 * @generated from protobuf message PB.GameAction.SelectMergerSurvivor
 */
export interface PB_GameAction_SelectMergerSurvivor {
    /**
     * @generated from protobuf field: PB.GameBoardType chain = 1;
     */
    chain: PB_GameBoardType;
}
/**
 * @generated from protobuf message PB.GameAction.SelectChainToDisposeOfNext
 */
export interface PB_GameAction_SelectChainToDisposeOfNext {
    /**
     * @generated from protobuf field: PB.GameBoardType chain = 1;
     */
    chain: PB_GameBoardType;
}
/**
 * @generated from protobuf message PB.GameAction.DisposeOfShares
 */
export interface PB_GameAction_DisposeOfShares {
    /**
     * @generated from protobuf field: int32 trade_amount = 1;
     */
    tradeAmount: number;
    /**
     * @generated from protobuf field: int32 sell_amount = 2;
     */
    sellAmount: number;
}
/**
 * @generated from protobuf message PB.GameAction.PurchaseShares
 */
export interface PB_GameAction_PurchaseShares {
    /**
     * @generated from protobuf field: repeated PB.GameBoardType chains = 1;
     */
    chains: PB_GameBoardType[];
    /**
     * @generated from protobuf field: bool end_game = 2;
     */
    endGame: boolean;
}
/**
 * @generated from protobuf message PB.GameAction.GameOver
 */
export interface PB_GameAction_GameOver {
}
/**
 * @generated from protobuf message PB.MessageToServer
 */
export interface PB_MessageToServer {
    /**
     * @generated from protobuf field: PB.MessageToServer.Login login = 1;
     */
    login?: PB_MessageToServer_Login;
    /**
     * @generated from protobuf field: PB.MessageToServer.CreateGame create_game = 2;
     */
    createGame?: PB_MessageToServer_CreateGame;
    /**
     * @generated from protobuf field: PB.MessageToServer.EnterGame enter_game = 3;
     */
    enterGame?: PB_MessageToServer_EnterGame;
    /**
     * @generated from protobuf field: PB.MessageToServer.ExitGame exit_game = 4;
     */
    exitGame?: PB_MessageToServer_ExitGame;
    /**
     * @generated from protobuf field: PB.GameSetupAction do_game_setup_action = 5;
     */
    doGameSetupAction?: PB_GameSetupAction;
    /**
     * @generated from protobuf field: PB.MessageToServer.DoGameAction do_game_action = 6;
     */
    doGameAction?: PB_MessageToServer_DoGameAction;
}
/**
 * @generated from protobuf message PB.MessageToServer.Login
 */
export interface PB_MessageToServer_Login {
    /**
     * @generated from protobuf field: int32 version = 1;
     */
    version: number;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
}
/**
 * @generated from protobuf message PB.MessageToServer.CreateGame
 */
export interface PB_MessageToServer_CreateGame {
    /**
     * @generated from protobuf field: PB.GameMode game_mode = 1;
     */
    gameMode: PB_GameMode;
}
/**
 * @generated from protobuf message PB.MessageToServer.EnterGame
 */
export interface PB_MessageToServer_EnterGame {
    /**
     * @generated from protobuf field: int32 game_display_number = 1;
     */
    gameDisplayNumber: number;
    /**
     * @generated from protobuf field: int32 game_state_history_size = 2;
     */
    gameStateHistorySize: number;
}
/**
 * @generated from protobuf message PB.MessageToServer.ExitGame
 */
export interface PB_MessageToServer_ExitGame {
}
/**
 * @generated from protobuf message PB.MessageToServer.DoGameAction
 */
export interface PB_MessageToServer_DoGameAction {
    /**
     * @generated from protobuf field: int32 game_state_history_size = 1;
     */
    gameStateHistorySize: number;
    /**
     * @generated from protobuf field: PB.GameAction game_action = 2;
     */
    gameAction?: PB_GameAction;
}
/**
 * @generated from protobuf message PB.MessageToClient
 */
export interface PB_MessageToClient {
    /**
     * @generated from protobuf field: PB.MessageToClient.FatalError fatal_error = 1;
     */
    fatalError?: PB_MessageToClient_FatalError;
    /**
     * @generated from protobuf field: PB.MessageToClient.Greetings greetings = 2;
     */
    greetings?: PB_MessageToClient_Greetings;
    /**
     * @generated from protobuf field: PB.MessageToClient.ClientConnected client_connected = 3;
     */
    clientConnected?: PB_MessageToClient_ClientConnected;
    /**
     * @generated from protobuf field: PB.MessageToClient.ClientDisconnected client_disconnected = 4;
     */
    clientDisconnected?: PB_MessageToClient_ClientDisconnected;
    /**
     * @generated from protobuf field: PB.MessageToClient.GameCreated game_created = 5;
     */
    gameCreated?: PB_MessageToClient_GameCreated;
    /**
     * @generated from protobuf field: PB.MessageToClient.ClientEnteredGame client_entered_game = 6;
     */
    clientEnteredGame?: PB_MessageToClient_ClientEnteredGame;
    /**
     * @generated from protobuf field: PB.MessageToClient.ClientExitedGame client_exited_game = 7;
     */
    clientExitedGame?: PB_MessageToClient_ClientExitedGame;
    /**
     * @generated from protobuf field: PB.MessageToClient.GameSetupChanged game_setup_changed = 8;
     */
    gameSetupChanged?: PB_MessageToClient_GameSetupChanged;
    /**
     * @generated from protobuf field: PB.MessageToClient.GameStarted game_started = 9;
     */
    gameStarted?: PB_MessageToClient_GameStarted;
    /**
     * @generated from protobuf field: PB.MessageToClient.GameBoardChanged game_board_changed = 10;
     */
    gameBoardChanged?: PB_MessageToClient_GameBoardChanged;
    /**
     * @generated from protobuf field: PB.GameState game_action_done = 11;
     */
    gameActionDone?: PB_GameState;
}
/**
 * @generated from protobuf message PB.MessageToClient.FatalError
 */
export interface PB_MessageToClient_FatalError {
    /**
     * @generated from protobuf field: PB.ErrorCode error_code = 1;
     */
    errorCode: PB_ErrorCode;
}
/**
 * @generated from protobuf message PB.MessageToClient.Greetings
 */
export interface PB_MessageToClient_Greetings {
    /**
     * @generated from protobuf field: int32 client_id = 1;
     */
    clientId: number;
    /**
     * @generated from protobuf field: repeated PB.MessageToClient.Greetings.User users = 2;
     */
    users: PB_MessageToClient_Greetings_User[];
    /**
     * @generated from protobuf field: repeated PB.Game games = 3;
     */
    games: PB_Game[];
}
/**
 * @generated from protobuf message PB.MessageToClient.Greetings.User
 */
export interface PB_MessageToClient_Greetings_User {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: repeated PB.MessageToClient.Greetings.User.Client clients = 3;
     */
    clients: PB_MessageToClient_Greetings_User_Client[];
}
/**
 * @generated from protobuf message PB.MessageToClient.Greetings.User.Client
 */
export interface PB_MessageToClient_Greetings_User_Client {
    /**
     * @generated from protobuf field: int32 client_id = 1;
     */
    clientId: number;
    /**
     * @generated from protobuf field: int32 game_display_number = 2;
     */
    gameDisplayNumber: number; // excluded if not in a game
}
/**
 * @generated from protobuf message PB.MessageToClient.ClientConnected
 */
export interface PB_MessageToClient_ClientConnected {
    /**
     * @generated from protobuf field: int32 client_id = 1;
     */
    clientId: number;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: string username = 3;
     */
    username: string; // excluded if already known
}
/**
 * @generated from protobuf message PB.MessageToClient.ClientDisconnected
 */
export interface PB_MessageToClient_ClientDisconnected {
    /**
     * @generated from protobuf field: int32 client_id = 1;
     */
    clientId: number;
}
/**
 * @generated from protobuf message PB.MessageToClient.GameCreated
 */
export interface PB_MessageToClient_GameCreated {
    /**
     * @generated from protobuf field: int32 game_id = 1;
     */
    gameId: number;
    /**
     * @generated from protobuf field: int32 game_display_number = 2;
     */
    gameDisplayNumber: number;
    /**
     * @generated from protobuf field: PB.GameMode game_mode = 3;
     */
    gameMode: PB_GameMode;
    /**
     * @generated from protobuf field: int32 host_client_id = 4;
     */
    hostClientId: number;
}
/**
 * @generated from protobuf message PB.MessageToClient.ClientEnteredGame
 */
export interface PB_MessageToClient_ClientEnteredGame {
    /**
     * @generated from protobuf field: int32 client_id = 1;
     */
    clientId: number;
    /**
     * @generated from protobuf field: int32 game_display_number = 2;
     */
    gameDisplayNumber: number;
}
/**
 * @generated from protobuf message PB.MessageToClient.ClientExitedGame
 */
export interface PB_MessageToClient_ClientExitedGame {
    /**
     * @generated from protobuf field: int32 client_id = 1;
     */
    clientId: number;
}
/**
 * @generated from protobuf message PB.MessageToClient.GameSetupChanged
 */
export interface PB_MessageToClient_GameSetupChanged {
    /**
     * @generated from protobuf field: int32 game_display_number = 1;
     */
    gameDisplayNumber: number;
    /**
     * @generated from protobuf field: PB.GameSetupChange game_setup_change = 2;
     */
    gameSetupChange?: PB_GameSetupChange;
}
/**
 * @generated from protobuf message PB.MessageToClient.GameStarted
 */
export interface PB_MessageToClient_GameStarted {
    /**
     * @generated from protobuf field: int32 game_display_number = 1;
     */
    gameDisplayNumber: number;
    /**
     * @generated from protobuf field: repeated int32 user_ids = 2;
     */
    userIds: number[];
}
/**
 * @generated from protobuf message PB.MessageToClient.GameBoardChanged
 */
export interface PB_MessageToClient_GameBoardChanged {
    /**
     * @generated from protobuf field: int32 game_display_number = 1;
     */
    gameDisplayNumber: number;
    /**
     * @generated from protobuf field: PB.GameBoardType game_board_type = 2;
     */
    gameBoardType: PB_GameBoardType;
    /**
     * @generated from protobuf field: repeated int32 tiles = 3;
     */
    tiles: number[];
}
/**
 * @generated from protobuf message PB.MessagesToClient
 */
export interface PB_MessagesToClient {
    /**
     * @generated from protobuf field: repeated PB.MessageToClient messages_to_client = 1;
     */
    messagesToClient: PB_MessageToClient[];
}
/**
 * @generated from protobuf enum PB.ErrorCode
 */
export enum PB_ErrorCode {
    /**
     * @generated from protobuf enum value: NOT_USING_LATEST_VERSION = 0;
     */
    NOT_USING_LATEST_VERSION = 0,
    /**
     * @generated from protobuf enum value: INTERNAL_SERVER_ERROR = 1;
     */
    INTERNAL_SERVER_ERROR = 1,
    /**
     * @generated from protobuf enum value: INVALID_MESSAGE_FORMAT = 2;
     */
    INVALID_MESSAGE_FORMAT = 2,
    /**
     * @generated from protobuf enum value: INVALID_USERNAME = 3;
     */
    INVALID_USERNAME = 3,
    /**
     * @generated from protobuf enum value: MISSING_PASSWORD = 4;
     */
    MISSING_PASSWORD = 4,
    /**
     * @generated from protobuf enum value: PROVIDED_PASSWORD = 5;
     */
    PROVIDED_PASSWORD = 5,
    /**
     * @generated from protobuf enum value: INCORRECT_PASSWORD = 6;
     */
    INCORRECT_PASSWORD = 6,
    /**
     * @generated from protobuf enum value: INVALID_MESSAGE = 7;
     */
    INVALID_MESSAGE = 7,
    /**
     * @generated from protobuf enum value: COULD_NOT_CONNECT = 8;
     */
    COULD_NOT_CONNECT = 8
}
/**
 * @generated from protobuf enum PB.GameBoardType
 */
export enum PB_GameBoardType {
    /**
     * @generated from protobuf enum value: LUXOR = 0;
     */
    LUXOR = 0,
    /**
     * @generated from protobuf enum value: TOWER = 1;
     */
    TOWER = 1,
    /**
     * @generated from protobuf enum value: AMERICAN = 2;
     */
    AMERICAN = 2,
    /**
     * @generated from protobuf enum value: FESTIVAL = 3;
     */
    FESTIVAL = 3,
    /**
     * @generated from protobuf enum value: WORLDWIDE = 4;
     */
    WORLDWIDE = 4,
    /**
     * @generated from protobuf enum value: CONTINENTAL = 5;
     */
    CONTINENTAL = 5,
    /**
     * @generated from protobuf enum value: IMPERIAL = 6;
     */
    IMPERIAL = 6,
    /**
     * @generated from protobuf enum value: NOTHING = 7;
     */
    NOTHING = 7,
    /**
     * @generated from protobuf enum value: NOTHING_YET = 8;
     */
    NOTHING_YET = 8,
    /**
     * @generated from protobuf enum value: CANT_PLAY_EVER = 9;
     */
    CANT_PLAY_EVER = 9,
    /**
     * @generated from protobuf enum value: I_HAVE_THIS = 10;
     */
    I_HAVE_THIS = 10,
    /**
     * @generated from protobuf enum value: WILL_PUT_LONELY_TILE_DOWN = 11;
     */
    WILL_PUT_LONELY_TILE_DOWN = 11,
    /**
     * @generated from protobuf enum value: HAVE_NEIGHBORING_TILE_TOO = 12;
     */
    HAVE_NEIGHBORING_TILE_TOO = 12,
    /**
     * @generated from protobuf enum value: WILL_FORM_NEW_CHAIN = 13;
     */
    WILL_FORM_NEW_CHAIN = 13,
    /**
     * @generated from protobuf enum value: WILL_MERGE_CHAINS = 14;
     */
    WILL_MERGE_CHAINS = 14,
    /**
     * @generated from protobuf enum value: CANT_PLAY_NOW = 15;
     */
    CANT_PLAY_NOW = 15,
    /**
     * @generated from protobuf enum value: MAX = 16;
     */
    MAX = 16
}
/**
 * @generated from protobuf enum PB.GameMode
 */
export enum PB_GameMode {
    /**
     * not used, here because the first enum value must be zero in proto3
     *
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: SINGLES_1 = 1;
     */
    SINGLES_1 = 1,
    /**
     * @generated from protobuf enum value: SINGLES_2 = 2;
     */
    SINGLES_2 = 2,
    /**
     * @generated from protobuf enum value: SINGLES_3 = 3;
     */
    SINGLES_3 = 3,
    /**
     * @generated from protobuf enum value: SINGLES_4 = 4;
     */
    SINGLES_4 = 4,
    /**
     * @generated from protobuf enum value: SINGLES_5 = 5;
     */
    SINGLES_5 = 5,
    /**
     * @generated from protobuf enum value: SINGLES_6 = 6;
     */
    SINGLES_6 = 6,
    /**
     * @generated from protobuf enum value: TEAMS_2_VS_2 = 7;
     */
    TEAMS_2_VS_2 = 7,
    /**
     * @generated from protobuf enum value: TEAMS_2_VS_2_VS_2 = 8;
     */
    TEAMS_2_VS_2_VS_2 = 8,
    /**
     * @generated from protobuf enum value: TEAMS_3_VS_3 = 9;
     */
    TEAMS_3_VS_3 = 9
}
/**
 * @generated from protobuf enum PB.PlayerArrangementMode
 */
export enum PB_PlayerArrangementMode {
    /**
     * @generated from protobuf enum value: VERSION_1 = 0;
     */
    VERSION_1 = 0,
    /**
     * @generated from protobuf enum value: RANDOM_ORDER = 1;
     */
    RANDOM_ORDER = 1,
    /**
     * @generated from protobuf enum value: EXACT_ORDER = 2;
     */
    EXACT_ORDER = 2,
    /**
     * @generated from protobuf enum value: SPECIFY_TEAMS = 3;
     */
    SPECIFY_TEAMS = 3
}
/**
 * @generated from protobuf enum PB.GameStatus
 */
export enum PB_GameStatus {
    /**
     * @generated from protobuf enum value: SETTING_UP = 0;
     */
    SETTING_UP = 0,
    /**
     * @generated from protobuf enum value: IN_PROGRESS = 1;
     */
    IN_PROGRESS = 1,
    /**
     * @generated from protobuf enum value: COMPLETED = 2;
     */
    COMPLETED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class PB$Type extends MessageType<PB> {
    constructor() {
        super("PB", []);
    }
    create(value?: PartialMessage<PB>): PB {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB): PB {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PB, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB
 */
export const PB = new PB$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_Game$Type extends MessageType<PB_Game> {
    constructor() {
        super("PB.Game", [
            { no: 1, name: "game_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_display_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "game_status", kind: "enum", T: () => ["PB.GameStatus", PB_GameStatus] },
            { no: 4, name: "game_mode", kind: "enum", T: () => ["PB.GameMode", PB_GameMode] },
            { no: 5, name: "player_arrangement_mode", kind: "enum", T: () => ["PB.PlayerArrangementMode", PB_PlayerArrangementMode] },
            { no: 6, name: "positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PB_Game_Position },
            { no: 7, name: "game_board", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_Game>): PB_Game {
        const message = { gameId: 0, gameDisplayNumber: 0, gameStatus: 0, gameMode: 0, playerArrangementMode: 0, positions: [], gameBoard: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_Game>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_Game): PB_Game {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 game_id */ 1:
                    message.gameId = reader.int32();
                    break;
                case /* int32 game_display_number */ 2:
                    message.gameDisplayNumber = reader.int32();
                    break;
                case /* PB.GameStatus game_status */ 3:
                    message.gameStatus = reader.int32();
                    break;
                case /* PB.GameMode game_mode */ 4:
                    message.gameMode = reader.int32();
                    break;
                case /* PB.PlayerArrangementMode player_arrangement_mode */ 5:
                    message.playerArrangementMode = reader.int32();
                    break;
                case /* repeated PB.Game.Position positions */ 6:
                    message.positions.push(PB_Game_Position.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 game_board */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.gameBoard.push(reader.int32());
                    else
                        message.gameBoard.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_Game, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 game_id = 1; */
        if (message.gameId !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameId);
        /* int32 game_display_number = 2; */
        if (message.gameDisplayNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.gameDisplayNumber);
        /* PB.GameStatus game_status = 3; */
        if (message.gameStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.gameStatus);
        /* PB.GameMode game_mode = 4; */
        if (message.gameMode !== 0)
            writer.tag(4, WireType.Varint).int32(message.gameMode);
        /* PB.PlayerArrangementMode player_arrangement_mode = 5; */
        if (message.playerArrangementMode !== 0)
            writer.tag(5, WireType.Varint).int32(message.playerArrangementMode);
        /* repeated PB.Game.Position positions = 6; */
        for (let i = 0; i < message.positions.length; i++)
            PB_Game_Position.internalBinaryWrite(message.positions[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 game_board = 7; */
        if (message.gameBoard.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.gameBoard.length; i++)
                writer.int32(message.gameBoard[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.Game
 */
export const PB_Game = new PB_Game$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_Game_Position$Type extends MessageType<PB_Game_Position> {
    constructor() {
        super("PB.Game.Position", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_host", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "approves_of_game_setup", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PB_Game_Position>): PB_Game_Position {
        const message = { userId: 0, isHost: false, approvesOfGameSetup: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_Game_Position>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_Game_Position): PB_Game_Position {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                case /* bool is_host */ 2:
                    message.isHost = reader.bool();
                    break;
                case /* bool approves_of_game_setup */ 3:
                    message.approvesOfGameSetup = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_Game_Position, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* bool is_host = 2; */
        if (message.isHost !== false)
            writer.tag(2, WireType.Varint).bool(message.isHost);
        /* bool approves_of_game_setup = 3; */
        if (message.approvesOfGameSetup !== false)
            writer.tag(3, WireType.Varint).bool(message.approvesOfGameSetup);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.Game.Position
 */
export const PB_Game_Position = new PB_Game_Position$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameState$Type extends MessageType<PB_GameState> {
    constructor() {
        super("PB.GameState", [
            { no: 1, name: "game_action", kind: "message", T: () => PB_GameAction },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "revealed_tile_rack_tiles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PB_GameState_RevealedTileRackTile },
            { no: 4, name: "revealed_tile_bag_tiles", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "player_id_with_playable_tile_plus_one", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameState>): PB_GameState {
        const message = { timestamp: 0, revealedTileRackTiles: [], revealedTileBagTiles: [], playerIdWithPlayableTilePlusOne: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameState): PB_GameState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameAction game_action */ 1:
                    message.gameAction = PB_GameAction.internalBinaryRead(reader, reader.uint32(), options, message.gameAction);
                    break;
                case /* int64 timestamp = 2 [jstype = JS_NUMBER];*/ 2:
                    message.timestamp = reader.int64().toNumber();
                    break;
                case /* repeated PB.GameState.RevealedTileRackTile revealed_tile_rack_tiles */ 3:
                    message.revealedTileRackTiles.push(PB_GameState_RevealedTileRackTile.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 revealed_tile_bag_tiles */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.revealedTileBagTiles.push(reader.int32());
                    else
                        message.revealedTileBagTiles.push(reader.int32());
                    break;
                case /* int32 player_id_with_playable_tile_plus_one */ 5:
                    message.playerIdWithPlayableTilePlusOne = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameAction game_action = 1; */
        if (message.gameAction)
            PB_GameAction.internalBinaryWrite(message.gameAction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 timestamp = 2 [jstype = JS_NUMBER]; */
        if (message.timestamp !== 0)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        /* repeated PB.GameState.RevealedTileRackTile revealed_tile_rack_tiles = 3; */
        for (let i = 0; i < message.revealedTileRackTiles.length; i++)
            PB_GameState_RevealedTileRackTile.internalBinaryWrite(message.revealedTileRackTiles[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 revealed_tile_bag_tiles = 4; */
        if (message.revealedTileBagTiles.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.revealedTileBagTiles.length; i++)
                writer.int32(message.revealedTileBagTiles[i]);
            writer.join();
        }
        /* int32 player_id_with_playable_tile_plus_one = 5; */
        if (message.playerIdWithPlayableTilePlusOne !== 0)
            writer.tag(5, WireType.Varint).int32(message.playerIdWithPlayableTilePlusOne);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameState
 */
export const PB_GameState = new PB_GameState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameState_RevealedTileRackTile$Type extends MessageType<PB_GameState_RevealedTileRackTile> {
    constructor() {
        super("PB.GameState.RevealedTileRackTile", [
            { no: 1, name: "tile", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "player_id_belongs_to", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameState_RevealedTileRackTile>): PB_GameState_RevealedTileRackTile {
        const message = { tile: 0, playerIdBelongsTo: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameState_RevealedTileRackTile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameState_RevealedTileRackTile): PB_GameState_RevealedTileRackTile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tile */ 1:
                    message.tile = reader.int32();
                    break;
                case /* int32 player_id_belongs_to */ 2:
                    message.playerIdBelongsTo = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameState_RevealedTileRackTile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tile = 1; */
        if (message.tile !== 0)
            writer.tag(1, WireType.Varint).int32(message.tile);
        /* int32 player_id_belongs_to = 2; */
        if (message.playerIdBelongsTo !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerIdBelongsTo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameState.RevealedTileRackTile
 */
export const PB_GameState_RevealedTileRackTile = new PB_GameState_RevealedTileRackTile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupAction$Type extends MessageType<PB_GameSetupAction> {
    constructor() {
        super("PB.GameSetupAction", [
            { no: 1, name: "join_game", kind: "message", T: () => PB_GameSetupAction_JoinGame },
            { no: 2, name: "unjoin_game", kind: "message", T: () => PB_GameSetupAction_UnjoinGame },
            { no: 3, name: "approve_of_game_setup", kind: "message", T: () => PB_GameSetupAction_ApproveOfGameSetup },
            { no: 4, name: "change_game_mode", kind: "message", T: () => PB_GameSetupAction_ChangeGameMode },
            { no: 5, name: "change_player_arrangement_mode", kind: "message", T: () => PB_GameSetupAction_ChangePlayerArrangementMode },
            { no: 6, name: "swap_positions", kind: "message", T: () => PB_GameSetupAction_SwapPositions },
            { no: 7, name: "kick_user", kind: "message", T: () => PB_GameSetupAction_KickUser }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupAction>): PB_GameSetupAction {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupAction): PB_GameSetupAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameSetupAction.JoinGame join_game */ 1:
                    message.joinGame = PB_GameSetupAction_JoinGame.internalBinaryRead(reader, reader.uint32(), options, message.joinGame);
                    break;
                case /* PB.GameSetupAction.UnjoinGame unjoin_game */ 2:
                    message.unjoinGame = PB_GameSetupAction_UnjoinGame.internalBinaryRead(reader, reader.uint32(), options, message.unjoinGame);
                    break;
                case /* PB.GameSetupAction.ApproveOfGameSetup approve_of_game_setup */ 3:
                    message.approveOfGameSetup = PB_GameSetupAction_ApproveOfGameSetup.internalBinaryRead(reader, reader.uint32(), options, message.approveOfGameSetup);
                    break;
                case /* PB.GameSetupAction.ChangeGameMode change_game_mode */ 4:
                    message.changeGameMode = PB_GameSetupAction_ChangeGameMode.internalBinaryRead(reader, reader.uint32(), options, message.changeGameMode);
                    break;
                case /* PB.GameSetupAction.ChangePlayerArrangementMode change_player_arrangement_mode */ 5:
                    message.changePlayerArrangementMode = PB_GameSetupAction_ChangePlayerArrangementMode.internalBinaryRead(reader, reader.uint32(), options, message.changePlayerArrangementMode);
                    break;
                case /* PB.GameSetupAction.SwapPositions swap_positions */ 6:
                    message.swapPositions = PB_GameSetupAction_SwapPositions.internalBinaryRead(reader, reader.uint32(), options, message.swapPositions);
                    break;
                case /* PB.GameSetupAction.KickUser kick_user */ 7:
                    message.kickUser = PB_GameSetupAction_KickUser.internalBinaryRead(reader, reader.uint32(), options, message.kickUser);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameSetupAction.JoinGame join_game = 1; */
        if (message.joinGame)
            PB_GameSetupAction_JoinGame.internalBinaryWrite(message.joinGame, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupAction.UnjoinGame unjoin_game = 2; */
        if (message.unjoinGame)
            PB_GameSetupAction_UnjoinGame.internalBinaryWrite(message.unjoinGame, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupAction.ApproveOfGameSetup approve_of_game_setup = 3; */
        if (message.approveOfGameSetup)
            PB_GameSetupAction_ApproveOfGameSetup.internalBinaryWrite(message.approveOfGameSetup, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupAction.ChangeGameMode change_game_mode = 4; */
        if (message.changeGameMode)
            PB_GameSetupAction_ChangeGameMode.internalBinaryWrite(message.changeGameMode, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupAction.ChangePlayerArrangementMode change_player_arrangement_mode = 5; */
        if (message.changePlayerArrangementMode)
            PB_GameSetupAction_ChangePlayerArrangementMode.internalBinaryWrite(message.changePlayerArrangementMode, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupAction.SwapPositions swap_positions = 6; */
        if (message.swapPositions)
            PB_GameSetupAction_SwapPositions.internalBinaryWrite(message.swapPositions, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupAction.KickUser kick_user = 7; */
        if (message.kickUser)
            PB_GameSetupAction_KickUser.internalBinaryWrite(message.kickUser, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupAction
 */
export const PB_GameSetupAction = new PB_GameSetupAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupAction_JoinGame$Type extends MessageType<PB_GameSetupAction_JoinGame> {
    constructor() {
        super("PB.GameSetupAction.JoinGame", []);
    }
    create(value?: PartialMessage<PB_GameSetupAction_JoinGame>): PB_GameSetupAction_JoinGame {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupAction_JoinGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupAction_JoinGame): PB_GameSetupAction_JoinGame {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PB_GameSetupAction_JoinGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupAction.JoinGame
 */
export const PB_GameSetupAction_JoinGame = new PB_GameSetupAction_JoinGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupAction_UnjoinGame$Type extends MessageType<PB_GameSetupAction_UnjoinGame> {
    constructor() {
        super("PB.GameSetupAction.UnjoinGame", []);
    }
    create(value?: PartialMessage<PB_GameSetupAction_UnjoinGame>): PB_GameSetupAction_UnjoinGame {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupAction_UnjoinGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupAction_UnjoinGame): PB_GameSetupAction_UnjoinGame {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PB_GameSetupAction_UnjoinGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupAction.UnjoinGame
 */
export const PB_GameSetupAction_UnjoinGame = new PB_GameSetupAction_UnjoinGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupAction_ApproveOfGameSetup$Type extends MessageType<PB_GameSetupAction_ApproveOfGameSetup> {
    constructor() {
        super("PB.GameSetupAction.ApproveOfGameSetup", []);
    }
    create(value?: PartialMessage<PB_GameSetupAction_ApproveOfGameSetup>): PB_GameSetupAction_ApproveOfGameSetup {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupAction_ApproveOfGameSetup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupAction_ApproveOfGameSetup): PB_GameSetupAction_ApproveOfGameSetup {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PB_GameSetupAction_ApproveOfGameSetup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupAction.ApproveOfGameSetup
 */
export const PB_GameSetupAction_ApproveOfGameSetup = new PB_GameSetupAction_ApproveOfGameSetup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupAction_ChangeGameMode$Type extends MessageType<PB_GameSetupAction_ChangeGameMode> {
    constructor() {
        super("PB.GameSetupAction.ChangeGameMode", [
            { no: 1, name: "game_mode", kind: "enum", T: () => ["PB.GameMode", PB_GameMode] }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupAction_ChangeGameMode>): PB_GameSetupAction_ChangeGameMode {
        const message = { gameMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupAction_ChangeGameMode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupAction_ChangeGameMode): PB_GameSetupAction_ChangeGameMode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameMode game_mode */ 1:
                    message.gameMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupAction_ChangeGameMode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameMode game_mode = 1; */
        if (message.gameMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupAction.ChangeGameMode
 */
export const PB_GameSetupAction_ChangeGameMode = new PB_GameSetupAction_ChangeGameMode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupAction_ChangePlayerArrangementMode$Type extends MessageType<PB_GameSetupAction_ChangePlayerArrangementMode> {
    constructor() {
        super("PB.GameSetupAction.ChangePlayerArrangementMode", [
            { no: 1, name: "player_arrangement_mode", kind: "enum", T: () => ["PB.PlayerArrangementMode", PB_PlayerArrangementMode] }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupAction_ChangePlayerArrangementMode>): PB_GameSetupAction_ChangePlayerArrangementMode {
        const message = { playerArrangementMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupAction_ChangePlayerArrangementMode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupAction_ChangePlayerArrangementMode): PB_GameSetupAction_ChangePlayerArrangementMode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.PlayerArrangementMode player_arrangement_mode */ 1:
                    message.playerArrangementMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupAction_ChangePlayerArrangementMode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.PlayerArrangementMode player_arrangement_mode = 1; */
        if (message.playerArrangementMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerArrangementMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupAction.ChangePlayerArrangementMode
 */
export const PB_GameSetupAction_ChangePlayerArrangementMode = new PB_GameSetupAction_ChangePlayerArrangementMode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupAction_SwapPositions$Type extends MessageType<PB_GameSetupAction_SwapPositions> {
    constructor() {
        super("PB.GameSetupAction.SwapPositions", [
            { no: 1, name: "position1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "position2", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupAction_SwapPositions>): PB_GameSetupAction_SwapPositions {
        const message = { position1: 0, position2: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupAction_SwapPositions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupAction_SwapPositions): PB_GameSetupAction_SwapPositions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 position1 */ 1:
                    message.position1 = reader.int32();
                    break;
                case /* int32 position2 */ 2:
                    message.position2 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupAction_SwapPositions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 position1 = 1; */
        if (message.position1 !== 0)
            writer.tag(1, WireType.Varint).int32(message.position1);
        /* int32 position2 = 2; */
        if (message.position2 !== 0)
            writer.tag(2, WireType.Varint).int32(message.position2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupAction.SwapPositions
 */
export const PB_GameSetupAction_SwapPositions = new PB_GameSetupAction_SwapPositions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupAction_KickUser$Type extends MessageType<PB_GameSetupAction_KickUser> {
    constructor() {
        super("PB.GameSetupAction.KickUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupAction_KickUser>): PB_GameSetupAction_KickUser {
        const message = { userId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupAction_KickUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupAction_KickUser): PB_GameSetupAction_KickUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupAction_KickUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupAction.KickUser
 */
export const PB_GameSetupAction_KickUser = new PB_GameSetupAction_KickUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupChange$Type extends MessageType<PB_GameSetupChange> {
    constructor() {
        super("PB.GameSetupChange", [
            { no: 1, name: "user_added", kind: "message", T: () => PB_GameSetupChange_UserAdded },
            { no: 2, name: "user_removed", kind: "message", T: () => PB_GameSetupChange_UserRemoved },
            { no: 3, name: "user_approved_of_game_setup", kind: "message", T: () => PB_GameSetupChange_UserApprovedOfGameSetup },
            { no: 4, name: "game_mode_changed", kind: "message", T: () => PB_GameSetupChange_GameModeChanged },
            { no: 5, name: "player_arrangement_mode_changed", kind: "message", T: () => PB_GameSetupChange_PlayerArrangementModeChanged },
            { no: 6, name: "positions_swapped", kind: "message", T: () => PB_GameSetupChange_PositionsSwapped },
            { no: 7, name: "user_kicked", kind: "message", T: () => PB_GameSetupChange_UserKicked }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupChange>): PB_GameSetupChange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupChange): PB_GameSetupChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameSetupChange.UserAdded user_added */ 1:
                    message.userAdded = PB_GameSetupChange_UserAdded.internalBinaryRead(reader, reader.uint32(), options, message.userAdded);
                    break;
                case /* PB.GameSetupChange.UserRemoved user_removed */ 2:
                    message.userRemoved = PB_GameSetupChange_UserRemoved.internalBinaryRead(reader, reader.uint32(), options, message.userRemoved);
                    break;
                case /* PB.GameSetupChange.UserApprovedOfGameSetup user_approved_of_game_setup */ 3:
                    message.userApprovedOfGameSetup = PB_GameSetupChange_UserApprovedOfGameSetup.internalBinaryRead(reader, reader.uint32(), options, message.userApprovedOfGameSetup);
                    break;
                case /* PB.GameSetupChange.GameModeChanged game_mode_changed */ 4:
                    message.gameModeChanged = PB_GameSetupChange_GameModeChanged.internalBinaryRead(reader, reader.uint32(), options, message.gameModeChanged);
                    break;
                case /* PB.GameSetupChange.PlayerArrangementModeChanged player_arrangement_mode_changed */ 5:
                    message.playerArrangementModeChanged = PB_GameSetupChange_PlayerArrangementModeChanged.internalBinaryRead(reader, reader.uint32(), options, message.playerArrangementModeChanged);
                    break;
                case /* PB.GameSetupChange.PositionsSwapped positions_swapped */ 6:
                    message.positionsSwapped = PB_GameSetupChange_PositionsSwapped.internalBinaryRead(reader, reader.uint32(), options, message.positionsSwapped);
                    break;
                case /* PB.GameSetupChange.UserKicked user_kicked */ 7:
                    message.userKicked = PB_GameSetupChange_UserKicked.internalBinaryRead(reader, reader.uint32(), options, message.userKicked);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameSetupChange.UserAdded user_added = 1; */
        if (message.userAdded)
            PB_GameSetupChange_UserAdded.internalBinaryWrite(message.userAdded, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupChange.UserRemoved user_removed = 2; */
        if (message.userRemoved)
            PB_GameSetupChange_UserRemoved.internalBinaryWrite(message.userRemoved, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupChange.UserApprovedOfGameSetup user_approved_of_game_setup = 3; */
        if (message.userApprovedOfGameSetup)
            PB_GameSetupChange_UserApprovedOfGameSetup.internalBinaryWrite(message.userApprovedOfGameSetup, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupChange.GameModeChanged game_mode_changed = 4; */
        if (message.gameModeChanged)
            PB_GameSetupChange_GameModeChanged.internalBinaryWrite(message.gameModeChanged, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupChange.PlayerArrangementModeChanged player_arrangement_mode_changed = 5; */
        if (message.playerArrangementModeChanged)
            PB_GameSetupChange_PlayerArrangementModeChanged.internalBinaryWrite(message.playerArrangementModeChanged, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupChange.PositionsSwapped positions_swapped = 6; */
        if (message.positionsSwapped)
            PB_GameSetupChange_PositionsSwapped.internalBinaryWrite(message.positionsSwapped, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupChange.UserKicked user_kicked = 7; */
        if (message.userKicked)
            PB_GameSetupChange_UserKicked.internalBinaryWrite(message.userKicked, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupChange
 */
export const PB_GameSetupChange = new PB_GameSetupChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupChange_UserAdded$Type extends MessageType<PB_GameSetupChange_UserAdded> {
    constructor() {
        super("PB.GameSetupChange.UserAdded", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupChange_UserAdded>): PB_GameSetupChange_UserAdded {
        const message = { userId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupChange_UserAdded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupChange_UserAdded): PB_GameSetupChange_UserAdded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupChange_UserAdded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupChange.UserAdded
 */
export const PB_GameSetupChange_UserAdded = new PB_GameSetupChange_UserAdded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupChange_UserRemoved$Type extends MessageType<PB_GameSetupChange_UserRemoved> {
    constructor() {
        super("PB.GameSetupChange.UserRemoved", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupChange_UserRemoved>): PB_GameSetupChange_UserRemoved {
        const message = { userId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupChange_UserRemoved>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupChange_UserRemoved): PB_GameSetupChange_UserRemoved {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupChange_UserRemoved, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupChange.UserRemoved
 */
export const PB_GameSetupChange_UserRemoved = new PB_GameSetupChange_UserRemoved$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupChange_UserApprovedOfGameSetup$Type extends MessageType<PB_GameSetupChange_UserApprovedOfGameSetup> {
    constructor() {
        super("PB.GameSetupChange.UserApprovedOfGameSetup", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupChange_UserApprovedOfGameSetup>): PB_GameSetupChange_UserApprovedOfGameSetup {
        const message = { userId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupChange_UserApprovedOfGameSetup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupChange_UserApprovedOfGameSetup): PB_GameSetupChange_UserApprovedOfGameSetup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupChange_UserApprovedOfGameSetup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupChange.UserApprovedOfGameSetup
 */
export const PB_GameSetupChange_UserApprovedOfGameSetup = new PB_GameSetupChange_UserApprovedOfGameSetup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupChange_GameModeChanged$Type extends MessageType<PB_GameSetupChange_GameModeChanged> {
    constructor() {
        super("PB.GameSetupChange.GameModeChanged", [
            { no: 1, name: "game_mode", kind: "enum", T: () => ["PB.GameMode", PB_GameMode] }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupChange_GameModeChanged>): PB_GameSetupChange_GameModeChanged {
        const message = { gameMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupChange_GameModeChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupChange_GameModeChanged): PB_GameSetupChange_GameModeChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameMode game_mode */ 1:
                    message.gameMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupChange_GameModeChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameMode game_mode = 1; */
        if (message.gameMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupChange.GameModeChanged
 */
export const PB_GameSetupChange_GameModeChanged = new PB_GameSetupChange_GameModeChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupChange_PlayerArrangementModeChanged$Type extends MessageType<PB_GameSetupChange_PlayerArrangementModeChanged> {
    constructor() {
        super("PB.GameSetupChange.PlayerArrangementModeChanged", [
            { no: 1, name: "player_arrangement_mode", kind: "enum", T: () => ["PB.PlayerArrangementMode", PB_PlayerArrangementMode] }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupChange_PlayerArrangementModeChanged>): PB_GameSetupChange_PlayerArrangementModeChanged {
        const message = { playerArrangementMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupChange_PlayerArrangementModeChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupChange_PlayerArrangementModeChanged): PB_GameSetupChange_PlayerArrangementModeChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.PlayerArrangementMode player_arrangement_mode */ 1:
                    message.playerArrangementMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupChange_PlayerArrangementModeChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.PlayerArrangementMode player_arrangement_mode = 1; */
        if (message.playerArrangementMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerArrangementMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupChange.PlayerArrangementModeChanged
 */
export const PB_GameSetupChange_PlayerArrangementModeChanged = new PB_GameSetupChange_PlayerArrangementModeChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupChange_PositionsSwapped$Type extends MessageType<PB_GameSetupChange_PositionsSwapped> {
    constructor() {
        super("PB.GameSetupChange.PositionsSwapped", [
            { no: 1, name: "position1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "position2", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupChange_PositionsSwapped>): PB_GameSetupChange_PositionsSwapped {
        const message = { position1: 0, position2: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupChange_PositionsSwapped>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupChange_PositionsSwapped): PB_GameSetupChange_PositionsSwapped {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 position1 */ 1:
                    message.position1 = reader.int32();
                    break;
                case /* int32 position2 */ 2:
                    message.position2 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupChange_PositionsSwapped, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 position1 = 1; */
        if (message.position1 !== 0)
            writer.tag(1, WireType.Varint).int32(message.position1);
        /* int32 position2 = 2; */
        if (message.position2 !== 0)
            writer.tag(2, WireType.Varint).int32(message.position2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupChange.PositionsSwapped
 */
export const PB_GameSetupChange_PositionsSwapped = new PB_GameSetupChange_PositionsSwapped$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameSetupChange_UserKicked$Type extends MessageType<PB_GameSetupChange_UserKicked> {
    constructor() {
        super("PB.GameSetupChange.UserKicked", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameSetupChange_UserKicked>): PB_GameSetupChange_UserKicked {
        const message = { userId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameSetupChange_UserKicked>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameSetupChange_UserKicked): PB_GameSetupChange_UserKicked {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameSetupChange_UserKicked, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameSetupChange.UserKicked
 */
export const PB_GameSetupChange_UserKicked = new PB_GameSetupChange_UserKicked$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameAction$Type extends MessageType<PB_GameAction> {
    constructor() {
        super("PB.GameAction", [
            { no: 1, name: "start_game", kind: "message", T: () => PB_GameAction_StartGame },
            { no: 2, name: "play_tile", kind: "message", T: () => PB_GameAction_PlayTile },
            { no: 3, name: "select_new_chain", kind: "message", T: () => PB_GameAction_SelectNewChain },
            { no: 4, name: "select_merger_survivor", kind: "message", T: () => PB_GameAction_SelectMergerSurvivor },
            { no: 5, name: "select_chain_to_dispose_of_next", kind: "message", T: () => PB_GameAction_SelectChainToDisposeOfNext },
            { no: 6, name: "dispose_of_shares", kind: "message", T: () => PB_GameAction_DisposeOfShares },
            { no: 7, name: "purchase_shares", kind: "message", T: () => PB_GameAction_PurchaseShares },
            { no: 8, name: "game_over", kind: "message", T: () => PB_GameAction_GameOver }
        ]);
    }
    create(value?: PartialMessage<PB_GameAction>): PB_GameAction {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameAction): PB_GameAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameAction.StartGame start_game */ 1:
                    message.startGame = PB_GameAction_StartGame.internalBinaryRead(reader, reader.uint32(), options, message.startGame);
                    break;
                case /* PB.GameAction.PlayTile play_tile */ 2:
                    message.playTile = PB_GameAction_PlayTile.internalBinaryRead(reader, reader.uint32(), options, message.playTile);
                    break;
                case /* PB.GameAction.SelectNewChain select_new_chain */ 3:
                    message.selectNewChain = PB_GameAction_SelectNewChain.internalBinaryRead(reader, reader.uint32(), options, message.selectNewChain);
                    break;
                case /* PB.GameAction.SelectMergerSurvivor select_merger_survivor */ 4:
                    message.selectMergerSurvivor = PB_GameAction_SelectMergerSurvivor.internalBinaryRead(reader, reader.uint32(), options, message.selectMergerSurvivor);
                    break;
                case /* PB.GameAction.SelectChainToDisposeOfNext select_chain_to_dispose_of_next */ 5:
                    message.selectChainToDisposeOfNext = PB_GameAction_SelectChainToDisposeOfNext.internalBinaryRead(reader, reader.uint32(), options, message.selectChainToDisposeOfNext);
                    break;
                case /* PB.GameAction.DisposeOfShares dispose_of_shares */ 6:
                    message.disposeOfShares = PB_GameAction_DisposeOfShares.internalBinaryRead(reader, reader.uint32(), options, message.disposeOfShares);
                    break;
                case /* PB.GameAction.PurchaseShares purchase_shares */ 7:
                    message.purchaseShares = PB_GameAction_PurchaseShares.internalBinaryRead(reader, reader.uint32(), options, message.purchaseShares);
                    break;
                case /* PB.GameAction.GameOver game_over */ 8:
                    message.gameOver = PB_GameAction_GameOver.internalBinaryRead(reader, reader.uint32(), options, message.gameOver);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameAction.StartGame start_game = 1; */
        if (message.startGame)
            PB_GameAction_StartGame.internalBinaryWrite(message.startGame, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameAction.PlayTile play_tile = 2; */
        if (message.playTile)
            PB_GameAction_PlayTile.internalBinaryWrite(message.playTile, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameAction.SelectNewChain select_new_chain = 3; */
        if (message.selectNewChain)
            PB_GameAction_SelectNewChain.internalBinaryWrite(message.selectNewChain, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameAction.SelectMergerSurvivor select_merger_survivor = 4; */
        if (message.selectMergerSurvivor)
            PB_GameAction_SelectMergerSurvivor.internalBinaryWrite(message.selectMergerSurvivor, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameAction.SelectChainToDisposeOfNext select_chain_to_dispose_of_next = 5; */
        if (message.selectChainToDisposeOfNext)
            PB_GameAction_SelectChainToDisposeOfNext.internalBinaryWrite(message.selectChainToDisposeOfNext, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameAction.DisposeOfShares dispose_of_shares = 6; */
        if (message.disposeOfShares)
            PB_GameAction_DisposeOfShares.internalBinaryWrite(message.disposeOfShares, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameAction.PurchaseShares purchase_shares = 7; */
        if (message.purchaseShares)
            PB_GameAction_PurchaseShares.internalBinaryWrite(message.purchaseShares, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameAction.GameOver game_over = 8; */
        if (message.gameOver)
            PB_GameAction_GameOver.internalBinaryWrite(message.gameOver, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameAction
 */
export const PB_GameAction = new PB_GameAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameAction_StartGame$Type extends MessageType<PB_GameAction_StartGame> {
    constructor() {
        super("PB.GameAction.StartGame", []);
    }
    create(value?: PartialMessage<PB_GameAction_StartGame>): PB_GameAction_StartGame {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameAction_StartGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameAction_StartGame): PB_GameAction_StartGame {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PB_GameAction_StartGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameAction.StartGame
 */
export const PB_GameAction_StartGame = new PB_GameAction_StartGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameAction_PlayTile$Type extends MessageType<PB_GameAction_PlayTile> {
    constructor() {
        super("PB.GameAction.PlayTile", [
            { no: 1, name: "tile", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameAction_PlayTile>): PB_GameAction_PlayTile {
        const message = { tile: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameAction_PlayTile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameAction_PlayTile): PB_GameAction_PlayTile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tile */ 1:
                    message.tile = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameAction_PlayTile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tile = 1; */
        if (message.tile !== 0)
            writer.tag(1, WireType.Varint).int32(message.tile);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameAction.PlayTile
 */
export const PB_GameAction_PlayTile = new PB_GameAction_PlayTile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameAction_SelectNewChain$Type extends MessageType<PB_GameAction_SelectNewChain> {
    constructor() {
        super("PB.GameAction.SelectNewChain", [
            { no: 1, name: "chain", kind: "enum", T: () => ["PB.GameBoardType", PB_GameBoardType] }
        ]);
    }
    create(value?: PartialMessage<PB_GameAction_SelectNewChain>): PB_GameAction_SelectNewChain {
        const message = { chain: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameAction_SelectNewChain>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameAction_SelectNewChain): PB_GameAction_SelectNewChain {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameBoardType chain */ 1:
                    message.chain = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameAction_SelectNewChain, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameBoardType chain = 1; */
        if (message.chain !== 0)
            writer.tag(1, WireType.Varint).int32(message.chain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameAction.SelectNewChain
 */
export const PB_GameAction_SelectNewChain = new PB_GameAction_SelectNewChain$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameAction_SelectMergerSurvivor$Type extends MessageType<PB_GameAction_SelectMergerSurvivor> {
    constructor() {
        super("PB.GameAction.SelectMergerSurvivor", [
            { no: 1, name: "chain", kind: "enum", T: () => ["PB.GameBoardType", PB_GameBoardType] }
        ]);
    }
    create(value?: PartialMessage<PB_GameAction_SelectMergerSurvivor>): PB_GameAction_SelectMergerSurvivor {
        const message = { chain: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameAction_SelectMergerSurvivor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameAction_SelectMergerSurvivor): PB_GameAction_SelectMergerSurvivor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameBoardType chain */ 1:
                    message.chain = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameAction_SelectMergerSurvivor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameBoardType chain = 1; */
        if (message.chain !== 0)
            writer.tag(1, WireType.Varint).int32(message.chain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameAction.SelectMergerSurvivor
 */
export const PB_GameAction_SelectMergerSurvivor = new PB_GameAction_SelectMergerSurvivor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameAction_SelectChainToDisposeOfNext$Type extends MessageType<PB_GameAction_SelectChainToDisposeOfNext> {
    constructor() {
        super("PB.GameAction.SelectChainToDisposeOfNext", [
            { no: 1, name: "chain", kind: "enum", T: () => ["PB.GameBoardType", PB_GameBoardType] }
        ]);
    }
    create(value?: PartialMessage<PB_GameAction_SelectChainToDisposeOfNext>): PB_GameAction_SelectChainToDisposeOfNext {
        const message = { chain: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameAction_SelectChainToDisposeOfNext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameAction_SelectChainToDisposeOfNext): PB_GameAction_SelectChainToDisposeOfNext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameBoardType chain */ 1:
                    message.chain = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameAction_SelectChainToDisposeOfNext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameBoardType chain = 1; */
        if (message.chain !== 0)
            writer.tag(1, WireType.Varint).int32(message.chain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameAction.SelectChainToDisposeOfNext
 */
export const PB_GameAction_SelectChainToDisposeOfNext = new PB_GameAction_SelectChainToDisposeOfNext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameAction_DisposeOfShares$Type extends MessageType<PB_GameAction_DisposeOfShares> {
    constructor() {
        super("PB.GameAction.DisposeOfShares", [
            { no: 1, name: "trade_amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "sell_amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameAction_DisposeOfShares>): PB_GameAction_DisposeOfShares {
        const message = { tradeAmount: 0, sellAmount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameAction_DisposeOfShares>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameAction_DisposeOfShares): PB_GameAction_DisposeOfShares {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 trade_amount */ 1:
                    message.tradeAmount = reader.int32();
                    break;
                case /* int32 sell_amount */ 2:
                    message.sellAmount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameAction_DisposeOfShares, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 trade_amount = 1; */
        if (message.tradeAmount !== 0)
            writer.tag(1, WireType.Varint).int32(message.tradeAmount);
        /* int32 sell_amount = 2; */
        if (message.sellAmount !== 0)
            writer.tag(2, WireType.Varint).int32(message.sellAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameAction.DisposeOfShares
 */
export const PB_GameAction_DisposeOfShares = new PB_GameAction_DisposeOfShares$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameAction_PurchaseShares$Type extends MessageType<PB_GameAction_PurchaseShares> {
    constructor() {
        super("PB.GameAction.PurchaseShares", [
            { no: 1, name: "chains", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["PB.GameBoardType", PB_GameBoardType] },
            { no: 2, name: "end_game", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PB_GameAction_PurchaseShares>): PB_GameAction_PurchaseShares {
        const message = { chains: [], endGame: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameAction_PurchaseShares>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameAction_PurchaseShares): PB_GameAction_PurchaseShares {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PB.GameBoardType chains */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chains.push(reader.int32());
                    else
                        message.chains.push(reader.int32());
                    break;
                case /* bool end_game */ 2:
                    message.endGame = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_GameAction_PurchaseShares, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PB.GameBoardType chains = 1; */
        if (message.chains.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.chains.length; i++)
                writer.int32(message.chains[i]);
            writer.join();
        }
        /* bool end_game = 2; */
        if (message.endGame !== false)
            writer.tag(2, WireType.Varint).bool(message.endGame);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameAction.PurchaseShares
 */
export const PB_GameAction_PurchaseShares = new PB_GameAction_PurchaseShares$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_GameAction_GameOver$Type extends MessageType<PB_GameAction_GameOver> {
    constructor() {
        super("PB.GameAction.GameOver", []);
    }
    create(value?: PartialMessage<PB_GameAction_GameOver>): PB_GameAction_GameOver {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_GameAction_GameOver>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_GameAction_GameOver): PB_GameAction_GameOver {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PB_GameAction_GameOver, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.GameAction.GameOver
 */
export const PB_GameAction_GameOver = new PB_GameAction_GameOver$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToServer$Type extends MessageType<PB_MessageToServer> {
    constructor() {
        super("PB.MessageToServer", [
            { no: 1, name: "login", kind: "message", T: () => PB_MessageToServer_Login },
            { no: 2, name: "create_game", kind: "message", T: () => PB_MessageToServer_CreateGame },
            { no: 3, name: "enter_game", kind: "message", T: () => PB_MessageToServer_EnterGame },
            { no: 4, name: "exit_game", kind: "message", T: () => PB_MessageToServer_ExitGame },
            { no: 5, name: "do_game_setup_action", kind: "message", T: () => PB_GameSetupAction },
            { no: 6, name: "do_game_action", kind: "message", T: () => PB_MessageToServer_DoGameAction }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToServer>): PB_MessageToServer {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToServer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToServer): PB_MessageToServer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.MessageToServer.Login login */ 1:
                    message.login = PB_MessageToServer_Login.internalBinaryRead(reader, reader.uint32(), options, message.login);
                    break;
                case /* PB.MessageToServer.CreateGame create_game */ 2:
                    message.createGame = PB_MessageToServer_CreateGame.internalBinaryRead(reader, reader.uint32(), options, message.createGame);
                    break;
                case /* PB.MessageToServer.EnterGame enter_game */ 3:
                    message.enterGame = PB_MessageToServer_EnterGame.internalBinaryRead(reader, reader.uint32(), options, message.enterGame);
                    break;
                case /* PB.MessageToServer.ExitGame exit_game */ 4:
                    message.exitGame = PB_MessageToServer_ExitGame.internalBinaryRead(reader, reader.uint32(), options, message.exitGame);
                    break;
                case /* PB.GameSetupAction do_game_setup_action */ 5:
                    message.doGameSetupAction = PB_GameSetupAction.internalBinaryRead(reader, reader.uint32(), options, message.doGameSetupAction);
                    break;
                case /* PB.MessageToServer.DoGameAction do_game_action */ 6:
                    message.doGameAction = PB_MessageToServer_DoGameAction.internalBinaryRead(reader, reader.uint32(), options, message.doGameAction);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.MessageToServer.Login login = 1; */
        if (message.login)
            PB_MessageToServer_Login.internalBinaryWrite(message.login, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToServer.CreateGame create_game = 2; */
        if (message.createGame)
            PB_MessageToServer_CreateGame.internalBinaryWrite(message.createGame, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToServer.EnterGame enter_game = 3; */
        if (message.enterGame)
            PB_MessageToServer_EnterGame.internalBinaryWrite(message.enterGame, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToServer.ExitGame exit_game = 4; */
        if (message.exitGame)
            PB_MessageToServer_ExitGame.internalBinaryWrite(message.exitGame, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameSetupAction do_game_setup_action = 5; */
        if (message.doGameSetupAction)
            PB_GameSetupAction.internalBinaryWrite(message.doGameSetupAction, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToServer.DoGameAction do_game_action = 6; */
        if (message.doGameAction)
            PB_MessageToServer_DoGameAction.internalBinaryWrite(message.doGameAction, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToServer
 */
export const PB_MessageToServer = new PB_MessageToServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToServer_Login$Type extends MessageType<PB_MessageToServer_Login> {
    constructor() {
        super("PB.MessageToServer.Login", [
            { no: 1, name: "version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToServer_Login>): PB_MessageToServer_Login {
        const message = { version: 0, username: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToServer_Login>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToServer_Login): PB_MessageToServer_Login {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 version */ 1:
                    message.version = reader.int32();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToServer_Login, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 version = 1; */
        if (message.version !== 0)
            writer.tag(1, WireType.Varint).int32(message.version);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToServer.Login
 */
export const PB_MessageToServer_Login = new PB_MessageToServer_Login$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToServer_CreateGame$Type extends MessageType<PB_MessageToServer_CreateGame> {
    constructor() {
        super("PB.MessageToServer.CreateGame", [
            { no: 1, name: "game_mode", kind: "enum", T: () => ["PB.GameMode", PB_GameMode] }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToServer_CreateGame>): PB_MessageToServer_CreateGame {
        const message = { gameMode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToServer_CreateGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToServer_CreateGame): PB_MessageToServer_CreateGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.GameMode game_mode */ 1:
                    message.gameMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToServer_CreateGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.GameMode game_mode = 1; */
        if (message.gameMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToServer.CreateGame
 */
export const PB_MessageToServer_CreateGame = new PB_MessageToServer_CreateGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToServer_EnterGame$Type extends MessageType<PB_MessageToServer_EnterGame> {
    constructor() {
        super("PB.MessageToServer.EnterGame", [
            { no: 1, name: "game_display_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_state_history_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToServer_EnterGame>): PB_MessageToServer_EnterGame {
        const message = { gameDisplayNumber: 0, gameStateHistorySize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToServer_EnterGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToServer_EnterGame): PB_MessageToServer_EnterGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 game_display_number */ 1:
                    message.gameDisplayNumber = reader.int32();
                    break;
                case /* int32 game_state_history_size */ 2:
                    message.gameStateHistorySize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToServer_EnterGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 game_display_number = 1; */
        if (message.gameDisplayNumber !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameDisplayNumber);
        /* int32 game_state_history_size = 2; */
        if (message.gameStateHistorySize !== 0)
            writer.tag(2, WireType.Varint).int32(message.gameStateHistorySize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToServer.EnterGame
 */
export const PB_MessageToServer_EnterGame = new PB_MessageToServer_EnterGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToServer_ExitGame$Type extends MessageType<PB_MessageToServer_ExitGame> {
    constructor() {
        super("PB.MessageToServer.ExitGame", []);
    }
    create(value?: PartialMessage<PB_MessageToServer_ExitGame>): PB_MessageToServer_ExitGame {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToServer_ExitGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToServer_ExitGame): PB_MessageToServer_ExitGame {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PB_MessageToServer_ExitGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToServer.ExitGame
 */
export const PB_MessageToServer_ExitGame = new PB_MessageToServer_ExitGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToServer_DoGameAction$Type extends MessageType<PB_MessageToServer_DoGameAction> {
    constructor() {
        super("PB.MessageToServer.DoGameAction", [
            { no: 1, name: "game_state_history_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_action", kind: "message", T: () => PB_GameAction }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToServer_DoGameAction>): PB_MessageToServer_DoGameAction {
        const message = { gameStateHistorySize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToServer_DoGameAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToServer_DoGameAction): PB_MessageToServer_DoGameAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 game_state_history_size */ 1:
                    message.gameStateHistorySize = reader.int32();
                    break;
                case /* PB.GameAction game_action */ 2:
                    message.gameAction = PB_GameAction.internalBinaryRead(reader, reader.uint32(), options, message.gameAction);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToServer_DoGameAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 game_state_history_size = 1; */
        if (message.gameStateHistorySize !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameStateHistorySize);
        /* PB.GameAction game_action = 2; */
        if (message.gameAction)
            PB_GameAction.internalBinaryWrite(message.gameAction, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToServer.DoGameAction
 */
export const PB_MessageToServer_DoGameAction = new PB_MessageToServer_DoGameAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient$Type extends MessageType<PB_MessageToClient> {
    constructor() {
        super("PB.MessageToClient", [
            { no: 1, name: "fatal_error", kind: "message", T: () => PB_MessageToClient_FatalError },
            { no: 2, name: "greetings", kind: "message", T: () => PB_MessageToClient_Greetings },
            { no: 3, name: "client_connected", kind: "message", T: () => PB_MessageToClient_ClientConnected },
            { no: 4, name: "client_disconnected", kind: "message", T: () => PB_MessageToClient_ClientDisconnected },
            { no: 5, name: "game_created", kind: "message", T: () => PB_MessageToClient_GameCreated },
            { no: 6, name: "client_entered_game", kind: "message", T: () => PB_MessageToClient_ClientEnteredGame },
            { no: 7, name: "client_exited_game", kind: "message", T: () => PB_MessageToClient_ClientExitedGame },
            { no: 8, name: "game_setup_changed", kind: "message", T: () => PB_MessageToClient_GameSetupChanged },
            { no: 9, name: "game_started", kind: "message", T: () => PB_MessageToClient_GameStarted },
            { no: 10, name: "game_board_changed", kind: "message", T: () => PB_MessageToClient_GameBoardChanged },
            { no: 11, name: "game_action_done", kind: "message", T: () => PB_GameState }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient>): PB_MessageToClient {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient): PB_MessageToClient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.MessageToClient.FatalError fatal_error */ 1:
                    message.fatalError = PB_MessageToClient_FatalError.internalBinaryRead(reader, reader.uint32(), options, message.fatalError);
                    break;
                case /* PB.MessageToClient.Greetings greetings */ 2:
                    message.greetings = PB_MessageToClient_Greetings.internalBinaryRead(reader, reader.uint32(), options, message.greetings);
                    break;
                case /* PB.MessageToClient.ClientConnected client_connected */ 3:
                    message.clientConnected = PB_MessageToClient_ClientConnected.internalBinaryRead(reader, reader.uint32(), options, message.clientConnected);
                    break;
                case /* PB.MessageToClient.ClientDisconnected client_disconnected */ 4:
                    message.clientDisconnected = PB_MessageToClient_ClientDisconnected.internalBinaryRead(reader, reader.uint32(), options, message.clientDisconnected);
                    break;
                case /* PB.MessageToClient.GameCreated game_created */ 5:
                    message.gameCreated = PB_MessageToClient_GameCreated.internalBinaryRead(reader, reader.uint32(), options, message.gameCreated);
                    break;
                case /* PB.MessageToClient.ClientEnteredGame client_entered_game */ 6:
                    message.clientEnteredGame = PB_MessageToClient_ClientEnteredGame.internalBinaryRead(reader, reader.uint32(), options, message.clientEnteredGame);
                    break;
                case /* PB.MessageToClient.ClientExitedGame client_exited_game */ 7:
                    message.clientExitedGame = PB_MessageToClient_ClientExitedGame.internalBinaryRead(reader, reader.uint32(), options, message.clientExitedGame);
                    break;
                case /* PB.MessageToClient.GameSetupChanged game_setup_changed */ 8:
                    message.gameSetupChanged = PB_MessageToClient_GameSetupChanged.internalBinaryRead(reader, reader.uint32(), options, message.gameSetupChanged);
                    break;
                case /* PB.MessageToClient.GameStarted game_started */ 9:
                    message.gameStarted = PB_MessageToClient_GameStarted.internalBinaryRead(reader, reader.uint32(), options, message.gameStarted);
                    break;
                case /* PB.MessageToClient.GameBoardChanged game_board_changed */ 10:
                    message.gameBoardChanged = PB_MessageToClient_GameBoardChanged.internalBinaryRead(reader, reader.uint32(), options, message.gameBoardChanged);
                    break;
                case /* PB.GameState game_action_done */ 11:
                    message.gameActionDone = PB_GameState.internalBinaryRead(reader, reader.uint32(), options, message.gameActionDone);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.MessageToClient.FatalError fatal_error = 1; */
        if (message.fatalError)
            PB_MessageToClient_FatalError.internalBinaryWrite(message.fatalError, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToClient.Greetings greetings = 2; */
        if (message.greetings)
            PB_MessageToClient_Greetings.internalBinaryWrite(message.greetings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToClient.ClientConnected client_connected = 3; */
        if (message.clientConnected)
            PB_MessageToClient_ClientConnected.internalBinaryWrite(message.clientConnected, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToClient.ClientDisconnected client_disconnected = 4; */
        if (message.clientDisconnected)
            PB_MessageToClient_ClientDisconnected.internalBinaryWrite(message.clientDisconnected, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToClient.GameCreated game_created = 5; */
        if (message.gameCreated)
            PB_MessageToClient_GameCreated.internalBinaryWrite(message.gameCreated, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToClient.ClientEnteredGame client_entered_game = 6; */
        if (message.clientEnteredGame)
            PB_MessageToClient_ClientEnteredGame.internalBinaryWrite(message.clientEnteredGame, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToClient.ClientExitedGame client_exited_game = 7; */
        if (message.clientExitedGame)
            PB_MessageToClient_ClientExitedGame.internalBinaryWrite(message.clientExitedGame, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToClient.GameSetupChanged game_setup_changed = 8; */
        if (message.gameSetupChanged)
            PB_MessageToClient_GameSetupChanged.internalBinaryWrite(message.gameSetupChanged, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToClient.GameStarted game_started = 9; */
        if (message.gameStarted)
            PB_MessageToClient_GameStarted.internalBinaryWrite(message.gameStarted, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* PB.MessageToClient.GameBoardChanged game_board_changed = 10; */
        if (message.gameBoardChanged)
            PB_MessageToClient_GameBoardChanged.internalBinaryWrite(message.gameBoardChanged, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* PB.GameState game_action_done = 11; */
        if (message.gameActionDone)
            PB_GameState.internalBinaryWrite(message.gameActionDone, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient
 */
export const PB_MessageToClient = new PB_MessageToClient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_FatalError$Type extends MessageType<PB_MessageToClient_FatalError> {
    constructor() {
        super("PB.MessageToClient.FatalError", [
            { no: 1, name: "error_code", kind: "enum", T: () => ["PB.ErrorCode", PB_ErrorCode] }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_FatalError>): PB_MessageToClient_FatalError {
        const message = { errorCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_FatalError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_FatalError): PB_MessageToClient_FatalError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PB.ErrorCode error_code */ 1:
                    message.errorCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_FatalError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PB.ErrorCode error_code = 1; */
        if (message.errorCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.errorCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.FatalError
 */
export const PB_MessageToClient_FatalError = new PB_MessageToClient_FatalError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_Greetings$Type extends MessageType<PB_MessageToClient_Greetings> {
    constructor() {
        super("PB.MessageToClient.Greetings", [
            { no: 1, name: "client_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PB_MessageToClient_Greetings_User },
            { no: 3, name: "games", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PB_Game }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_Greetings>): PB_MessageToClient_Greetings {
        const message = { clientId: 0, users: [], games: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_Greetings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_Greetings): PB_MessageToClient_Greetings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 client_id */ 1:
                    message.clientId = reader.int32();
                    break;
                case /* repeated PB.MessageToClient.Greetings.User users */ 2:
                    message.users.push(PB_MessageToClient_Greetings_User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated PB.Game games */ 3:
                    message.games.push(PB_Game.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_Greetings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 client_id = 1; */
        if (message.clientId !== 0)
            writer.tag(1, WireType.Varint).int32(message.clientId);
        /* repeated PB.MessageToClient.Greetings.User users = 2; */
        for (let i = 0; i < message.users.length; i++)
            PB_MessageToClient_Greetings_User.internalBinaryWrite(message.users[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated PB.Game games = 3; */
        for (let i = 0; i < message.games.length; i++)
            PB_Game.internalBinaryWrite(message.games[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.Greetings
 */
export const PB_MessageToClient_Greetings = new PB_MessageToClient_Greetings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_Greetings_User$Type extends MessageType<PB_MessageToClient_Greetings_User> {
    constructor() {
        super("PB.MessageToClient.Greetings.User", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "clients", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PB_MessageToClient_Greetings_User_Client }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_Greetings_User>): PB_MessageToClient_Greetings_User {
        const message = { userId: 0, username: "", clients: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_Greetings_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_Greetings_User): PB_MessageToClient_Greetings_User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* repeated PB.MessageToClient.Greetings.User.Client clients */ 3:
                    message.clients.push(PB_MessageToClient_Greetings_User_Client.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_Greetings_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* repeated PB.MessageToClient.Greetings.User.Client clients = 3; */
        for (let i = 0; i < message.clients.length; i++)
            PB_MessageToClient_Greetings_User_Client.internalBinaryWrite(message.clients[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.Greetings.User
 */
export const PB_MessageToClient_Greetings_User = new PB_MessageToClient_Greetings_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_Greetings_User_Client$Type extends MessageType<PB_MessageToClient_Greetings_User_Client> {
    constructor() {
        super("PB.MessageToClient.Greetings.User.Client", [
            { no: 1, name: "client_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_display_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_Greetings_User_Client>): PB_MessageToClient_Greetings_User_Client {
        const message = { clientId: 0, gameDisplayNumber: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_Greetings_User_Client>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_Greetings_User_Client): PB_MessageToClient_Greetings_User_Client {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 client_id */ 1:
                    message.clientId = reader.int32();
                    break;
                case /* int32 game_display_number */ 2:
                    message.gameDisplayNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_Greetings_User_Client, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 client_id = 1; */
        if (message.clientId !== 0)
            writer.tag(1, WireType.Varint).int32(message.clientId);
        /* int32 game_display_number = 2; */
        if (message.gameDisplayNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.gameDisplayNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.Greetings.User.Client
 */
export const PB_MessageToClient_Greetings_User_Client = new PB_MessageToClient_Greetings_User_Client$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_ClientConnected$Type extends MessageType<PB_MessageToClient_ClientConnected> {
    constructor() {
        super("PB.MessageToClient.ClientConnected", [
            { no: 1, name: "client_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_ClientConnected>): PB_MessageToClient_ClientConnected {
        const message = { clientId: 0, userId: 0, username: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_ClientConnected>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_ClientConnected): PB_MessageToClient_ClientConnected {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 client_id */ 1:
                    message.clientId = reader.int32();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                case /* string username */ 3:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_ClientConnected, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 client_id = 1; */
        if (message.clientId !== 0)
            writer.tag(1, WireType.Varint).int32(message.clientId);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        /* string username = 3; */
        if (message.username !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.ClientConnected
 */
export const PB_MessageToClient_ClientConnected = new PB_MessageToClient_ClientConnected$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_ClientDisconnected$Type extends MessageType<PB_MessageToClient_ClientDisconnected> {
    constructor() {
        super("PB.MessageToClient.ClientDisconnected", [
            { no: 1, name: "client_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_ClientDisconnected>): PB_MessageToClient_ClientDisconnected {
        const message = { clientId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_ClientDisconnected>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_ClientDisconnected): PB_MessageToClient_ClientDisconnected {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 client_id */ 1:
                    message.clientId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_ClientDisconnected, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 client_id = 1; */
        if (message.clientId !== 0)
            writer.tag(1, WireType.Varint).int32(message.clientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.ClientDisconnected
 */
export const PB_MessageToClient_ClientDisconnected = new PB_MessageToClient_ClientDisconnected$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_GameCreated$Type extends MessageType<PB_MessageToClient_GameCreated> {
    constructor() {
        super("PB.MessageToClient.GameCreated", [
            { no: 1, name: "game_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_display_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "game_mode", kind: "enum", T: () => ["PB.GameMode", PB_GameMode] },
            { no: 4, name: "host_client_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_GameCreated>): PB_MessageToClient_GameCreated {
        const message = { gameId: 0, gameDisplayNumber: 0, gameMode: 0, hostClientId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_GameCreated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_GameCreated): PB_MessageToClient_GameCreated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 game_id */ 1:
                    message.gameId = reader.int32();
                    break;
                case /* int32 game_display_number */ 2:
                    message.gameDisplayNumber = reader.int32();
                    break;
                case /* PB.GameMode game_mode */ 3:
                    message.gameMode = reader.int32();
                    break;
                case /* int32 host_client_id */ 4:
                    message.hostClientId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_GameCreated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 game_id = 1; */
        if (message.gameId !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameId);
        /* int32 game_display_number = 2; */
        if (message.gameDisplayNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.gameDisplayNumber);
        /* PB.GameMode game_mode = 3; */
        if (message.gameMode !== 0)
            writer.tag(3, WireType.Varint).int32(message.gameMode);
        /* int32 host_client_id = 4; */
        if (message.hostClientId !== 0)
            writer.tag(4, WireType.Varint).int32(message.hostClientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.GameCreated
 */
export const PB_MessageToClient_GameCreated = new PB_MessageToClient_GameCreated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_ClientEnteredGame$Type extends MessageType<PB_MessageToClient_ClientEnteredGame> {
    constructor() {
        super("PB.MessageToClient.ClientEnteredGame", [
            { no: 1, name: "client_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_display_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_ClientEnteredGame>): PB_MessageToClient_ClientEnteredGame {
        const message = { clientId: 0, gameDisplayNumber: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_ClientEnteredGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_ClientEnteredGame): PB_MessageToClient_ClientEnteredGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 client_id */ 1:
                    message.clientId = reader.int32();
                    break;
                case /* int32 game_display_number */ 2:
                    message.gameDisplayNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_ClientEnteredGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 client_id = 1; */
        if (message.clientId !== 0)
            writer.tag(1, WireType.Varint).int32(message.clientId);
        /* int32 game_display_number = 2; */
        if (message.gameDisplayNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.gameDisplayNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.ClientEnteredGame
 */
export const PB_MessageToClient_ClientEnteredGame = new PB_MessageToClient_ClientEnteredGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_ClientExitedGame$Type extends MessageType<PB_MessageToClient_ClientExitedGame> {
    constructor() {
        super("PB.MessageToClient.ClientExitedGame", [
            { no: 1, name: "client_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_ClientExitedGame>): PB_MessageToClient_ClientExitedGame {
        const message = { clientId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_ClientExitedGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_ClientExitedGame): PB_MessageToClient_ClientExitedGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 client_id */ 1:
                    message.clientId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_ClientExitedGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 client_id = 1; */
        if (message.clientId !== 0)
            writer.tag(1, WireType.Varint).int32(message.clientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.ClientExitedGame
 */
export const PB_MessageToClient_ClientExitedGame = new PB_MessageToClient_ClientExitedGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_GameSetupChanged$Type extends MessageType<PB_MessageToClient_GameSetupChanged> {
    constructor() {
        super("PB.MessageToClient.GameSetupChanged", [
            { no: 1, name: "game_display_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_setup_change", kind: "message", T: () => PB_GameSetupChange }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_GameSetupChanged>): PB_MessageToClient_GameSetupChanged {
        const message = { gameDisplayNumber: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_GameSetupChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_GameSetupChanged): PB_MessageToClient_GameSetupChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 game_display_number */ 1:
                    message.gameDisplayNumber = reader.int32();
                    break;
                case /* PB.GameSetupChange game_setup_change */ 2:
                    message.gameSetupChange = PB_GameSetupChange.internalBinaryRead(reader, reader.uint32(), options, message.gameSetupChange);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_GameSetupChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 game_display_number = 1; */
        if (message.gameDisplayNumber !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameDisplayNumber);
        /* PB.GameSetupChange game_setup_change = 2; */
        if (message.gameSetupChange)
            PB_GameSetupChange.internalBinaryWrite(message.gameSetupChange, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.GameSetupChanged
 */
export const PB_MessageToClient_GameSetupChanged = new PB_MessageToClient_GameSetupChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_GameStarted$Type extends MessageType<PB_MessageToClient_GameStarted> {
    constructor() {
        super("PB.MessageToClient.GameStarted", [
            { no: 1, name: "game_display_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_GameStarted>): PB_MessageToClient_GameStarted {
        const message = { gameDisplayNumber: 0, userIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_GameStarted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_GameStarted): PB_MessageToClient_GameStarted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 game_display_number */ 1:
                    message.gameDisplayNumber = reader.int32();
                    break;
                case /* repeated int32 user_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int32());
                    else
                        message.userIds.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_GameStarted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 game_display_number = 1; */
        if (message.gameDisplayNumber !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameDisplayNumber);
        /* repeated int32 user_ids = 2; */
        if (message.userIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int32(message.userIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.GameStarted
 */
export const PB_MessageToClient_GameStarted = new PB_MessageToClient_GameStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessageToClient_GameBoardChanged$Type extends MessageType<PB_MessageToClient_GameBoardChanged> {
    constructor() {
        super("PB.MessageToClient.GameBoardChanged", [
            { no: 1, name: "game_display_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_board_type", kind: "enum", T: () => ["PB.GameBoardType", PB_GameBoardType] },
            { no: 3, name: "tiles", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PB_MessageToClient_GameBoardChanged>): PB_MessageToClient_GameBoardChanged {
        const message = { gameDisplayNumber: 0, gameBoardType: 0, tiles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessageToClient_GameBoardChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessageToClient_GameBoardChanged): PB_MessageToClient_GameBoardChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 game_display_number */ 1:
                    message.gameDisplayNumber = reader.int32();
                    break;
                case /* PB.GameBoardType game_board_type */ 2:
                    message.gameBoardType = reader.int32();
                    break;
                case /* repeated int32 tiles */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tiles.push(reader.int32());
                    else
                        message.tiles.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessageToClient_GameBoardChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 game_display_number = 1; */
        if (message.gameDisplayNumber !== 0)
            writer.tag(1, WireType.Varint).int32(message.gameDisplayNumber);
        /* PB.GameBoardType game_board_type = 2; */
        if (message.gameBoardType !== 0)
            writer.tag(2, WireType.Varint).int32(message.gameBoardType);
        /* repeated int32 tiles = 3; */
        if (message.tiles.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tiles.length; i++)
                writer.int32(message.tiles[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessageToClient.GameBoardChanged
 */
export const PB_MessageToClient_GameBoardChanged = new PB_MessageToClient_GameBoardChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PB_MessagesToClient$Type extends MessageType<PB_MessagesToClient> {
    constructor() {
        super("PB.MessagesToClient", [
            { no: 1, name: "messages_to_client", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PB_MessageToClient }
        ]);
    }
    create(value?: PartialMessage<PB_MessagesToClient>): PB_MessagesToClient {
        const message = { messagesToClient: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PB_MessagesToClient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PB_MessagesToClient): PB_MessagesToClient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PB.MessageToClient messages_to_client */ 1:
                    message.messagesToClient.push(PB_MessageToClient.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PB_MessagesToClient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PB.MessageToClient messages_to_client = 1; */
        for (let i = 0; i < message.messagesToClient.length; i++)
            PB_MessageToClient.internalBinaryWrite(message.messagesToClient[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PB.MessagesToClient
 */
export const PB_MessagesToClient = new PB_MessagesToClient$Type();
